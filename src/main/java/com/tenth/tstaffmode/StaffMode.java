package com.tenth.tstaffmode;

import net.md_5.bungee.api.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class StaffMode extends JavaPlugin implements CommandExecutor {
    private Map<UUID, ItemStack[]> savedInventories;
    private File inventoryFile;
    private FileConfiguration inventoryConfig;

    @Override
    public void onEnable() {
        //this method is ran when the plugin is enabled on the server. ie startup.
        savedInventories = new HashMap<>(); //init inv map

        this.getCommand("tstaffmode").setExecutor(this); //may need try/catch or a nonnull requirement. this is the base command.

        setupInventoryFile(); //setup inventories.yml file

        loadInventories(); //load previously saved inventories

        getServer().getPluginManager().registerEvents(new StaffModeListener(this), this);

        getLogger().info(ChatColor.GREEN + "TStaffMode Enabled.");
    }

    @Override
    public void onDisable() {
        saveInventories(); //save all inventories on plugin disable
        getLogger().info(ChatColor.GREEN + "Staff Inventories Saved.");
    }

    private void setupInventoryFile() {
        inventoryFile = new File(getDataFolder(), "inventories.yml");
        if (!inventoryFile.exists()) {
            inventoryFile.getParentFile().mkdirs();
            saveResource("inventories.yml", false);
        }
        inventoryConfig = YamlConfiguration.loadConfiguration(inventoryFile); //load the config file for inventories
    }

    //loads all inventories from the yml to memory
    private void loadInventories() {
        ConfigurationSection section = inventoryConfig.getConfigurationSection("inventories");
        if (section != null) {
            for (String key : section.getKeys(false)) {
                UUID uuid;
                try {
                    uuid = UUID.fromString(key);
                } catch (IllegalArgumentException e) {
                    getLogger().warning("Invalid UUID in inventories.yml: " + key);
                    continue;
                }

                //List<ItemStack> items = section.getList(key, new ArrayList<>());
                //funny way to work around the error generated by the above line. ln 71-80 just checks everything to make sure its all the right type.
                List<?> rawList = section.getList(key, new ArrayList<>());
                List<ItemStack> items = new ArrayList<>();

                if (rawList != null) {
                    for (Object obj : rawList) {
                        if (obj instanceof ItemStack) {
                            items.add((ItemStack) obj);
                        }
                    }
                }

                ItemStack[] inventory = items.toArray(new ItemStack[0]);
                savedInventories.put(uuid, inventory);
            }
        }
    }

    //saves all inventories to the yml
    private void saveInventories() {
        ConfigurationSection section = inventoryConfig.createSection("inventories");

        for (Map.Entry<UUID, ItemStack[]> entry : savedInventories.entrySet()) {
            List<ItemStack> items = Arrays.asList(entry.getValue());
            section.set(entry.getKey().toString(), items);
        }

        try {
            inventoryConfig.save(inventoryFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void saveInventory(UUID uuid, ItemStack[] inventory) {
        savedInventories.put(uuid, inventory.clone());

        //save to yml
        ConfigurationSection section = inventoryConfig.getConfigurationSection("inventories");
        if (section == null) {
            section = inventoryConfig.createSection("inventories");
        }
        section.set(uuid.toString(), Arrays.asList(inventory));

        try {
            inventoryConfig.save(inventoryFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //remove an individual player's saved inv
    private void removeSavedInventory(UUID uuid) {
        savedInventories.remove(uuid);

        ConfigurationSection section = inventoryConfig.getConfigurationSection("inventories");
        if (section != null) {
            section.set(uuid.toString(), null);
            try {
                inventoryConfig.save(inventoryFile);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    //handles /staffmode commmand
    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!(sender instanceof Player)) {
            sender.sendMessage("Only players can use this command.");
            return true;
        }

        Player player = (Player) sender;

        //check perms
        if (!player.hasPermission("tstaffmode.use")) {
            player.sendMessage(ChatColor.RED + "You dont have permission to use this command.");
            return true;
        }

        if (args.length == 1 && args[0].equalsIgnoreCase("on")) {
            enableStaffMode(player);
        } else if (args.length == 1 && args[0].equalsIgnoreCase("off")) {
            disableStaffMode(player);
        } else if (args.length == 1 && args[0].equalsIgnoreCase("help")) {
            aboutHelpMessage(player);
        } else {
            player.sendMessage(ChatColor.RED + "Usage: /tstaffmode <on|off>");
            return true;
        }
        return true;
    }

    //enable staffmode for a player
    private void enableStaffMode(Player player) {
        UUID uuid = player.getUniqueId();

        //check if player is already in staffmode
        if (savedInventories.containsKey(uuid)) {
            player.sendMessage(ChatColor.RED + "You are already in staff mode.");
            return;
        }

        ItemStack[] currentInventory = player.getInventory().getContents();
        saveInventory(uuid, currentInventory);

        player.getInventory().clear();

        player.addPotionEffect(new PotionEffect(PotionEffectType.NIGHT_VISION, Integer.MAX_VALUE, 1, false, false));

        player.sendMessage(ChatColor.GREEN + "Staff mode enabled.");
        getLogger().info(player.getName() + "has enabled staff mode.");
    }

    //disable staffmode for a player
    private void disableStaffMode(Player player) {
        UUID uuid = player.getUniqueId();

        //check if player is in staff mode
        if (!savedInventories.containsKey(uuid)) {
            player.sendMessage(ChatColor.RED + "You are not in staff mode.");
            return;
        }

        ItemStack[] savedInventory = savedInventories.get(uuid);
        player.getInventory().setContents(savedInventory);

        //remove saved inv from conf
        removeSavedInventory(uuid);

        player.removePotionEffect(PotionEffectType.NIGHT_VISION);

        player.sendMessage(ChatColor.GREEN + "Staff mode disabled.");
        getLogger().info(player.getName() + "has disabled staff mode.");
    }

    //forcefully remove a player from staff mode. boolean to inform the player of removal or not.
    public void forceDisableStaffMode(Player player, boolean sendMessage) {
        UUID uuid = player.getUniqueId();

        if (!savedInventories.containsKey(uuid)) {
            if (sendMessage) {
                player.sendMessage(ChatColor.RED + "Player is not in staff mode.");
            }
            return;
        }

        // Restore the player's inventory
        ItemStack[] savedInventory = savedInventories.get(uuid);
        player.getInventory().setContents(savedInventory);

        // Remove from memory and config
        removeSavedInventory(uuid);

        if (sendMessage) {
            player.sendMessage(ChatColor.GREEN + "Staff mode disabled for player " + player.getName() + ".");
        }
    }

    public Map<UUID, ItemStack[]> getSavedInventories() {
        return savedInventories;
    }

    private void aboutHelpMessage(Player player) {
        player.sendMessage(ChatColor.DARK_GRAY + "Plugin version is " + ChatColor.YELLOW + "1.0" + ChatColor.DARK_GRAY
                + "built for minecraft version " + ChatColor.YELLOW + "1.21.0");
    }
}
